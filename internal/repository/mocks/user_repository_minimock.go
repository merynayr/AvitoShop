// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/merynayr/AvitoShop/internal/repository.UserRepository -o user_repository_minimock.go -n UserRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/merynayr/AvitoShop/internal/model"
)

// UserRepositoryMock implements mm_repository.UserRepository
type UserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, user *model.User) (i1 int64, err error)
	funcCreateUserOrigin    string
	inspectFuncCreateUser   func(ctx context.Context, user *model.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserRepositoryMockCreateUser

	funcGetUserByName          func(ctx context.Context, name string) (up1 *model.User, err error)
	funcGetUserByNameOrigin    string
	inspectFuncGetUserByName   func(ctx context.Context, name string)
	afterGetUserByNameCounter  uint64
	beforeGetUserByNameCounter uint64
	GetUserByNameMock          mUserRepositoryMockGetUserByName

	funcUpdateUser          func(ctx context.Context, user *model.UserUpdate) (err error)
	funcUpdateUserOrigin    string
	inspectFuncUpdateUser   func(ctx context.Context, user *model.UserUpdate)
	afterUpdateUserCounter  uint64
	beforeUpdateUserCounter uint64
	UpdateUserMock          mUserRepositoryMockUpdateUser
}

// NewUserRepositoryMock returns a mock for mm_repository.UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserRepositoryMockCreateUserParams{}

	m.GetUserByNameMock = mUserRepositoryMockGetUserByName{mock: m}
	m.GetUserByNameMock.callArgs = []*UserRepositoryMockGetUserByNameParams{}

	m.UpdateUserMock = mUserRepositoryMockUpdateUser{mock: m}
	m.UpdateUserMock.callArgs = []*UserRepositoryMockUpdateUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserRepositoryMockCreateUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockCreateUserExpectation
	expectations       []*UserRepositoryMockCreateUserExpectation

	callArgs []*UserRepositoryMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockCreateUserExpectation specifies expectation struct of the UserRepository.CreateUser
type UserRepositoryMockCreateUserExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockCreateUserParams
	paramPtrs          *UserRepositoryMockCreateUserParamPtrs
	expectationOrigins UserRepositoryMockCreateUserExpectationOrigins
	results            *UserRepositoryMockCreateUserResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockCreateUserParams contains parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParams struct {
	ctx  context.Context
	user *model.User
}

// UserRepositoryMockCreateUserParamPtrs contains pointers to parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// UserRepositoryMockCreateUserResults contains results of the UserRepository.CreateUser
type UserRepositoryMockCreateUserResults struct {
	i1  int64
	err error
}

// UserRepositoryMockCreateUserOrigins contains origins of expectations of the UserRepository.CreateUser
type UserRepositoryMockCreateUserExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mUserRepositoryMockCreateUser) Optional() *mUserRepositoryMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Expect(ctx context.Context, user *model.User) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &UserRepositoryMockCreateUserParams{ctx, user}
	mmCreateUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateUser
}

// ExpectUserParam2 sets up expected param user for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectUserParam2(user *model.User) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.user = &user
	mmCreateUser.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, user *model.User)) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Return(i1 int64, err error) *UserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserRepositoryMockCreateUserResults{i1, err}
	mmCreateUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateUser.mock
}

// Set uses given function f to mock the UserRepository.CreateUser method
func (mmCreateUser *mUserRepositoryMockCreateUser) Set(f func(ctx context.Context, user *model.User) (i1 int64, err error)) *UserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	mmCreateUser.mock.funcCreateUserOrigin = minimock.CallerInfo(1)
	return mmCreateUser.mock
}

// When sets expectation for the UserRepository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserRepositoryMockCreateUser) When(ctx context.Context, user *model.User) *UserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockCreateUserExpectation{
		mock:               mmCreateUser.mock,
		params:             &UserRepositoryMockCreateUserParams{ctx, user},
		expectationOrigins: UserRepositoryMockCreateUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockCreateUserExpectation) Then(i1 int64, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockCreateUserResults{i1, err}
	return e.mock
}

// Times sets number of times UserRepository.CreateUser should be invoked
func (mmCreateUser *mUserRepositoryMockCreateUser) Times(n uint64) *mUserRepositoryMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of UserRepositoryMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	mmCreateUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateUser
}

func (mmCreateUser *mUserRepositoryMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements mm_repository.UserRepository
func (mmCreateUser *UserRepositoryMock) CreateUser(ctx context.Context, user *model.User) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	mmCreateUser.t.Helper()

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, user)
	}

	mm_params := UserRepositoryMockCreateUserParams{ctx, user}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockCreateUserParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserRepositoryMock.CreateUser")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, user)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserRepositoryMock.CreateUser. %v %v", ctx, user)
	return
}

// CreateUserAfterCounter returns a count of finished UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserRepositoryMockCreateUser) Calls() []*UserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser at\n%s", m.CreateUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser at\n%s with params: %#v", m.CreateUserMock.defaultExpectation.expectationOrigins.origin, *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.CreateUser at\n%s", m.funcCreateUserOrigin)
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.CreateUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), m.CreateUserMock.expectedInvocationsOrigin, afterCreateUserCounter)
	}
}

type mUserRepositoryMockGetUserByName struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockGetUserByNameExpectation
	expectations       []*UserRepositoryMockGetUserByNameExpectation

	callArgs []*UserRepositoryMockGetUserByNameParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockGetUserByNameExpectation specifies expectation struct of the UserRepository.GetUserByName
type UserRepositoryMockGetUserByNameExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockGetUserByNameParams
	paramPtrs          *UserRepositoryMockGetUserByNameParamPtrs
	expectationOrigins UserRepositoryMockGetUserByNameExpectationOrigins
	results            *UserRepositoryMockGetUserByNameResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockGetUserByNameParams contains parameters of the UserRepository.GetUserByName
type UserRepositoryMockGetUserByNameParams struct {
	ctx  context.Context
	name string
}

// UserRepositoryMockGetUserByNameParamPtrs contains pointers to parameters of the UserRepository.GetUserByName
type UserRepositoryMockGetUserByNameParamPtrs struct {
	ctx  *context.Context
	name *string
}

// UserRepositoryMockGetUserByNameResults contains results of the UserRepository.GetUserByName
type UserRepositoryMockGetUserByNameResults struct {
	up1 *model.User
	err error
}

// UserRepositoryMockGetUserByNameOrigins contains origins of expectations of the UserRepository.GetUserByName
type UserRepositoryMockGetUserByNameExpectationOrigins struct {
	origin     string
	originCtx  string
	originName string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Optional() *mUserRepositoryMockGetUserByName {
	mmGetUserByName.optional = true
	return mmGetUserByName
}

// Expect sets up expected params for UserRepository.GetUserByName
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Expect(ctx context.Context, name string) *mUserRepositoryMockGetUserByName {
	if mmGetUserByName.mock.funcGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Set")
	}

	if mmGetUserByName.defaultExpectation == nil {
		mmGetUserByName.defaultExpectation = &UserRepositoryMockGetUserByNameExpectation{}
	}

	if mmGetUserByName.defaultExpectation.paramPtrs != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by ExpectParams functions")
	}

	mmGetUserByName.defaultExpectation.params = &UserRepositoryMockGetUserByNameParams{ctx, name}
	mmGetUserByName.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUserByName.expectations {
		if minimock.Equal(e.params, mmGetUserByName.defaultExpectation.params) {
			mmGetUserByName.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByName.defaultExpectation.params)
		}
	}

	return mmGetUserByName
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.GetUserByName
func (mmGetUserByName *mUserRepositoryMockGetUserByName) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockGetUserByName {
	if mmGetUserByName.mock.funcGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Set")
	}

	if mmGetUserByName.defaultExpectation == nil {
		mmGetUserByName.defaultExpectation = &UserRepositoryMockGetUserByNameExpectation{}
	}

	if mmGetUserByName.defaultExpectation.params != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Expect")
	}

	if mmGetUserByName.defaultExpectation.paramPtrs == nil {
		mmGetUserByName.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserByNameParamPtrs{}
	}
	mmGetUserByName.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUserByName.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUserByName
}

// ExpectNameParam2 sets up expected param name for UserRepository.GetUserByName
func (mmGetUserByName *mUserRepositoryMockGetUserByName) ExpectNameParam2(name string) *mUserRepositoryMockGetUserByName {
	if mmGetUserByName.mock.funcGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Set")
	}

	if mmGetUserByName.defaultExpectation == nil {
		mmGetUserByName.defaultExpectation = &UserRepositoryMockGetUserByNameExpectation{}
	}

	if mmGetUserByName.defaultExpectation.params != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Expect")
	}

	if mmGetUserByName.defaultExpectation.paramPtrs == nil {
		mmGetUserByName.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserByNameParamPtrs{}
	}
	mmGetUserByName.defaultExpectation.paramPtrs.name = &name
	mmGetUserByName.defaultExpectation.expectationOrigins.originName = minimock.CallerInfo(1)

	return mmGetUserByName
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.GetUserByName
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Inspect(f func(ctx context.Context, name string)) *mUserRepositoryMockGetUserByName {
	if mmGetUserByName.mock.inspectFuncGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.GetUserByName")
	}

	mmGetUserByName.mock.inspectFuncGetUserByName = f

	return mmGetUserByName
}

// Return sets up results that will be returned by UserRepository.GetUserByName
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Return(up1 *model.User, err error) *UserRepositoryMock {
	if mmGetUserByName.mock.funcGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Set")
	}

	if mmGetUserByName.defaultExpectation == nil {
		mmGetUserByName.defaultExpectation = &UserRepositoryMockGetUserByNameExpectation{mock: mmGetUserByName.mock}
	}
	mmGetUserByName.defaultExpectation.results = &UserRepositoryMockGetUserByNameResults{up1, err}
	mmGetUserByName.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUserByName.mock
}

// Set uses given function f to mock the UserRepository.GetUserByName method
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Set(f func(ctx context.Context, name string) (up1 *model.User, err error)) *UserRepositoryMock {
	if mmGetUserByName.defaultExpectation != nil {
		mmGetUserByName.mock.t.Fatalf("Default expectation is already set for the UserRepository.GetUserByName method")
	}

	if len(mmGetUserByName.expectations) > 0 {
		mmGetUserByName.mock.t.Fatalf("Some expectations are already set for the UserRepository.GetUserByName method")
	}

	mmGetUserByName.mock.funcGetUserByName = f
	mmGetUserByName.mock.funcGetUserByNameOrigin = minimock.CallerInfo(1)
	return mmGetUserByName.mock
}

// When sets expectation for the UserRepository.GetUserByName which will trigger the result defined by the following
// Then helper
func (mmGetUserByName *mUserRepositoryMockGetUserByName) When(ctx context.Context, name string) *UserRepositoryMockGetUserByNameExpectation {
	if mmGetUserByName.mock.funcGetUserByName != nil {
		mmGetUserByName.mock.t.Fatalf("UserRepositoryMock.GetUserByName mock is already set by Set")
	}

	expectation := &UserRepositoryMockGetUserByNameExpectation{
		mock:               mmGetUserByName.mock,
		params:             &UserRepositoryMockGetUserByNameParams{ctx, name},
		expectationOrigins: UserRepositoryMockGetUserByNameExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUserByName.expectations = append(mmGetUserByName.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.GetUserByName return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockGetUserByNameExpectation) Then(up1 *model.User, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockGetUserByNameResults{up1, err}
	return e.mock
}

// Times sets number of times UserRepository.GetUserByName should be invoked
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Times(n uint64) *mUserRepositoryMockGetUserByName {
	if n == 0 {
		mmGetUserByName.mock.t.Fatalf("Times of UserRepositoryMock.GetUserByName mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByName.expectedInvocations, n)
	mmGetUserByName.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUserByName
}

func (mmGetUserByName *mUserRepositoryMockGetUserByName) invocationsDone() bool {
	if len(mmGetUserByName.expectations) == 0 && mmGetUserByName.defaultExpectation == nil && mmGetUserByName.mock.funcGetUserByName == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByName.mock.afterGetUserByNameCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByName.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByName implements mm_repository.UserRepository
func (mmGetUserByName *UserRepositoryMock) GetUserByName(ctx context.Context, name string) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByName.beforeGetUserByNameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByName.afterGetUserByNameCounter, 1)

	mmGetUserByName.t.Helper()

	if mmGetUserByName.inspectFuncGetUserByName != nil {
		mmGetUserByName.inspectFuncGetUserByName(ctx, name)
	}

	mm_params := UserRepositoryMockGetUserByNameParams{ctx, name}

	// Record call args
	mmGetUserByName.GetUserByNameMock.mutex.Lock()
	mmGetUserByName.GetUserByNameMock.callArgs = append(mmGetUserByName.GetUserByNameMock.callArgs, &mm_params)
	mmGetUserByName.GetUserByNameMock.mutex.Unlock()

	for _, e := range mmGetUserByName.GetUserByNameMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByName.GetUserByNameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByName.GetUserByNameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByName.GetUserByNameMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByName.GetUserByNameMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockGetUserByNameParams{ctx, name}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByName.t.Errorf("UserRepositoryMock.GetUserByName got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByName.GetUserByNameMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.name != nil && !minimock.Equal(*mm_want_ptrs.name, mm_got.name) {
				mmGetUserByName.t.Errorf("UserRepositoryMock.GetUserByName got unexpected parameter name, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByName.GetUserByNameMock.defaultExpectation.expectationOrigins.originName, *mm_want_ptrs.name, mm_got.name, minimock.Diff(*mm_want_ptrs.name, mm_got.name))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByName.t.Errorf("UserRepositoryMock.GetUserByName got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUserByName.GetUserByNameMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByName.GetUserByNameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByName.t.Fatal("No results are set for the UserRepositoryMock.GetUserByName")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByName.funcGetUserByName != nil {
		return mmGetUserByName.funcGetUserByName(ctx, name)
	}
	mmGetUserByName.t.Fatalf("Unexpected call to UserRepositoryMock.GetUserByName. %v %v", ctx, name)
	return
}

// GetUserByNameAfterCounter returns a count of finished UserRepositoryMock.GetUserByName invocations
func (mmGetUserByName *UserRepositoryMock) GetUserByNameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByName.afterGetUserByNameCounter)
}

// GetUserByNameBeforeCounter returns a count of UserRepositoryMock.GetUserByName invocations
func (mmGetUserByName *UserRepositoryMock) GetUserByNameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByName.beforeGetUserByNameCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.GetUserByName.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByName *mUserRepositoryMockGetUserByName) Calls() []*UserRepositoryMockGetUserByNameParams {
	mmGetUserByName.mutex.RLock()

	argCopy := make([]*UserRepositoryMockGetUserByNameParams, len(mmGetUserByName.callArgs))
	copy(argCopy, mmGetUserByName.callArgs)

	mmGetUserByName.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByNameDone returns true if the count of the GetUserByName invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockGetUserByNameDone() bool {
	if m.GetUserByNameMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByNameMock.invocationsDone()
}

// MinimockGetUserByNameInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockGetUserByNameInspect() {
	for _, e := range m.GetUserByNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUserByName at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserByNameCounter := mm_atomic.LoadUint64(&m.afterGetUserByNameCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByNameMock.defaultExpectation != nil && afterGetUserByNameCounter < 1 {
		if m.GetUserByNameMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUserByName at\n%s", m.GetUserByNameMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUserByName at\n%s with params: %#v", m.GetUserByNameMock.defaultExpectation.expectationOrigins.origin, *m.GetUserByNameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByName != nil && afterGetUserByNameCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.GetUserByName at\n%s", m.funcGetUserByNameOrigin)
	}

	if !m.GetUserByNameMock.invocationsDone() && afterGetUserByNameCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.GetUserByName at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByNameMock.expectedInvocations), m.GetUserByNameMock.expectedInvocationsOrigin, afterGetUserByNameCounter)
	}
}

type mUserRepositoryMockUpdateUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockUpdateUserExpectation
	expectations       []*UserRepositoryMockUpdateUserExpectation

	callArgs []*UserRepositoryMockUpdateUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockUpdateUserExpectation specifies expectation struct of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockUpdateUserParams
	paramPtrs          *UserRepositoryMockUpdateUserParamPtrs
	expectationOrigins UserRepositoryMockUpdateUserExpectationOrigins
	results            *UserRepositoryMockUpdateUserResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockUpdateUserParams contains parameters of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserParams struct {
	ctx  context.Context
	user *model.UserUpdate
}

// UserRepositoryMockUpdateUserParamPtrs contains pointers to parameters of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserParamPtrs struct {
	ctx  *context.Context
	user **model.UserUpdate
}

// UserRepositoryMockUpdateUserResults contains results of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserResults struct {
	err error
}

// UserRepositoryMockUpdateUserOrigins contains origins of expectations of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Optional() *mUserRepositoryMockUpdateUser {
	mmUpdateUser.optional = true
	return mmUpdateUser
}

// Expect sets up expected params for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Expect(ctx context.Context, user *model.UserUpdate) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.paramPtrs != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by ExpectParams functions")
	}

	mmUpdateUser.defaultExpectation.params = &UserRepositoryMockUpdateUserParams{ctx, user}
	mmUpdateUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateUser.expectations {
		if minimock.Equal(e.params, mmUpdateUser.defaultExpectation.params) {
			mmUpdateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUser.defaultExpectation.params)
		}
	}

	return mmUpdateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.params != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Expect")
	}

	if mmUpdateUser.defaultExpectation.paramPtrs == nil {
		mmUpdateUser.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserParamPtrs{}
	}
	mmUpdateUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateUser
}

// ExpectUserParam2 sets up expected param user for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) ExpectUserParam2(user *model.UserUpdate) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.params != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Expect")
	}

	if mmUpdateUser.defaultExpectation.paramPtrs == nil {
		mmUpdateUser.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserParamPtrs{}
	}
	mmUpdateUser.defaultExpectation.paramPtrs.user = &user
	mmUpdateUser.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmUpdateUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Inspect(f func(ctx context.Context, user *model.UserUpdate)) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.inspectFuncUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.UpdateUser")
	}

	mmUpdateUser.mock.inspectFuncUpdateUser = f

	return mmUpdateUser
}

// Return sets up results that will be returned by UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Return(err error) *UserRepositoryMock {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{mock: mmUpdateUser.mock}
	}
	mmUpdateUser.defaultExpectation.results = &UserRepositoryMockUpdateUserResults{err}
	mmUpdateUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateUser.mock
}

// Set uses given function f to mock the UserRepository.UpdateUser method
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Set(f func(ctx context.Context, user *model.UserUpdate) (err error)) *UserRepositoryMock {
	if mmUpdateUser.defaultExpectation != nil {
		mmUpdateUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.UpdateUser method")
	}

	if len(mmUpdateUser.expectations) > 0 {
		mmUpdateUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.UpdateUser method")
	}

	mmUpdateUser.mock.funcUpdateUser = f
	mmUpdateUser.mock.funcUpdateUserOrigin = minimock.CallerInfo(1)
	return mmUpdateUser.mock
}

// When sets expectation for the UserRepository.UpdateUser which will trigger the result defined by the following
// Then helper
func (mmUpdateUser *mUserRepositoryMockUpdateUser) When(ctx context.Context, user *model.UserUpdate) *UserRepositoryMockUpdateUserExpectation {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockUpdateUserExpectation{
		mock:               mmUpdateUser.mock,
		params:             &UserRepositoryMockUpdateUserParams{ctx, user},
		expectationOrigins: UserRepositoryMockUpdateUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateUser.expectations = append(mmUpdateUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.UpdateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockUpdateUserExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockUpdateUserResults{err}
	return e.mock
}

// Times sets number of times UserRepository.UpdateUser should be invoked
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Times(n uint64) *mUserRepositoryMockUpdateUser {
	if n == 0 {
		mmUpdateUser.mock.t.Fatalf("Times of UserRepositoryMock.UpdateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateUser.expectedInvocations, n)
	mmUpdateUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateUser
}

func (mmUpdateUser *mUserRepositoryMockUpdateUser) invocationsDone() bool {
	if len(mmUpdateUser.expectations) == 0 && mmUpdateUser.defaultExpectation == nil && mmUpdateUser.mock.funcUpdateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateUser.mock.afterUpdateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateUser implements mm_repository.UserRepository
func (mmUpdateUser *UserRepositoryMock) UpdateUser(ctx context.Context, user *model.UserUpdate) (err error) {
	mm_atomic.AddUint64(&mmUpdateUser.beforeUpdateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUser.afterUpdateUserCounter, 1)

	mmUpdateUser.t.Helper()

	if mmUpdateUser.inspectFuncUpdateUser != nil {
		mmUpdateUser.inspectFuncUpdateUser(ctx, user)
	}

	mm_params := UserRepositoryMockUpdateUserParams{ctx, user}

	// Record call args
	mmUpdateUser.UpdateUserMock.mutex.Lock()
	mmUpdateUser.UpdateUserMock.callArgs = append(mmUpdateUser.UpdateUserMock.callArgs, &mm_params)
	mmUpdateUser.UpdateUserMock.mutex.Unlock()

	for _, e := range mmUpdateUser.UpdateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateUser.UpdateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUser.UpdateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUser.UpdateUserMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateUser.UpdateUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockUpdateUserParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateUser.UpdateUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateUser.UpdateUserMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateUser.UpdateUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUser.UpdateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUser.t.Fatal("No results are set for the UserRepositoryMock.UpdateUser")
		}
		return (*mm_results).err
	}
	if mmUpdateUser.funcUpdateUser != nil {
		return mmUpdateUser.funcUpdateUser(ctx, user)
	}
	mmUpdateUser.t.Fatalf("Unexpected call to UserRepositoryMock.UpdateUser. %v %v", ctx, user)
	return
}

// UpdateUserAfterCounter returns a count of finished UserRepositoryMock.UpdateUser invocations
func (mmUpdateUser *UserRepositoryMock) UpdateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.afterUpdateUserCounter)
}

// UpdateUserBeforeCounter returns a count of UserRepositoryMock.UpdateUser invocations
func (mmUpdateUser *UserRepositoryMock) UpdateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.beforeUpdateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.UpdateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Calls() []*UserRepositoryMockUpdateUserParams {
	mmUpdateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockUpdateUserParams, len(mmUpdateUser.callArgs))
	copy(argCopy, mmUpdateUser.callArgs)

	mmUpdateUser.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserDone returns true if the count of the UpdateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockUpdateUserDone() bool {
	if m.UpdateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateUserMock.invocationsDone()
}

// MinimockUpdateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockUpdateUserInspect() {
	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateUserCounter := mm_atomic.LoadUint64(&m.afterUpdateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserMock.defaultExpectation != nil && afterUpdateUserCounter < 1 {
		if m.UpdateUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser at\n%s", m.UpdateUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser at\n%s with params: %#v", m.UpdateUserMock.defaultExpectation.expectationOrigins.origin, *m.UpdateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUser != nil && afterUpdateUserCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser at\n%s", m.funcUpdateUserOrigin)
	}

	if !m.UpdateUserMock.invocationsDone() && afterUpdateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.UpdateUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateUserMock.expectedInvocations), m.UpdateUserMock.expectedInvocationsOrigin, afterUpdateUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()

			m.MinimockGetUserByNameInspect()

			m.MinimockUpdateUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockGetUserByNameDone() &&
		m.MinimockUpdateUserDone()
}
